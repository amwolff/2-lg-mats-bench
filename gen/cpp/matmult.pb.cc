// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matmult.proto

#include "matmult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_matmult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Matrix_matmult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_matmult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Matrix_Column_matmult_2eproto;
namespace matmult {
class Matrix_ColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Matrix_Column> _instance;
} _Matrix_Column_default_instance_;
class MatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Matrix> _instance;
} _Matrix_default_instance_;
class PerformerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerformerRequest> _instance;
} _PerformerRequest_default_instance_;
class PerformerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerformerResponse> _instance;
} _PerformerResponse_default_instance_;
}  // namespace matmult
static void InitDefaultsscc_info_Matrix_matmult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::matmult::_Matrix_default_instance_;
    new (ptr) ::matmult::Matrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::matmult::Matrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Matrix_matmult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Matrix_matmult_2eproto}, {
      &scc_info_Matrix_Column_matmult_2eproto.base,}};

static void InitDefaultsscc_info_Matrix_Column_matmult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::matmult::_Matrix_Column_default_instance_;
    new (ptr) ::matmult::Matrix_Column();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::matmult::Matrix_Column::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Matrix_Column_matmult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Matrix_Column_matmult_2eproto}, {}};

static void InitDefaultsscc_info_PerformerRequest_matmult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::matmult::_PerformerRequest_default_instance_;
    new (ptr) ::matmult::PerformerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::matmult::PerformerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerformerRequest_matmult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PerformerRequest_matmult_2eproto}, {
      &scc_info_Matrix_matmult_2eproto.base,}};

static void InitDefaultsscc_info_PerformerResponse_matmult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::matmult::_PerformerResponse_default_instance_;
    new (ptr) ::matmult::PerformerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::matmult::PerformerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerformerResponse_matmult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PerformerResponse_matmult_2eproto}, {
      &scc_info_Matrix_matmult_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_matmult_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_matmult_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_matmult_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_matmult_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::matmult::Matrix_Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::matmult::Matrix_Column, coefficients_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::matmult::Matrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::matmult::Matrix, columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::matmult::PerformerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::matmult::PerformerRequest, multiplier_),
  PROTOBUF_FIELD_OFFSET(::matmult::PerformerRequest, multiplicand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::matmult::PerformerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::matmult::PerformerResponse, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::matmult::Matrix_Column)},
  { 6, -1, sizeof(::matmult::Matrix)},
  { 12, -1, sizeof(::matmult::PerformerRequest)},
  { 19, -1, sizeof(::matmult::PerformerResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::matmult::_Matrix_Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::matmult::_Matrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::matmult::_PerformerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::matmult::_PerformerResponse_default_instance_),
};

const char descriptor_table_protodef_matmult_2eproto[] =
  "\n\rmatmult.proto\022\007matmult\"U\n\006Matrix\022\'\n\007co"
  "lumns\030\001 \003(\0132\026.matmult.Matrix.Column\032\"\n\006C"
  "olumn\022\030\n\014coefficients\030\001 \003(\001B\002\020\001\"^\n\020Perfo"
  "rmerRequest\022#\n\nmultiplier\030\001 \001(\0132\017.matmul"
  "t.Matrix\022%\n\014multiplicand\030\002 \001(\0132\017.matmult"
  ".Matrix\"4\n\021PerformerResponse\022\037\n\006result\030\001"
  " \001(\0132\017.matmult.Matrix2X\n\tPerformer\022K\n\020Mu"
  "ltiplyMatrices\022\031.matmult.PerformerReques"
  "t\032\032.matmult.PerformerResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_matmult_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_matmult_2eproto_sccs[4] = {
  &scc_info_Matrix_matmult_2eproto.base,
  &scc_info_Matrix_Column_matmult_2eproto.base,
  &scc_info_PerformerRequest_matmult_2eproto.base,
  &scc_info_PerformerResponse_matmult_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_matmult_2eproto_once;
static bool descriptor_table_matmult_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_matmult_2eproto = {
  &descriptor_table_matmult_2eproto_initialized, descriptor_table_protodef_matmult_2eproto, "matmult.proto", 359,
  &descriptor_table_matmult_2eproto_once, descriptor_table_matmult_2eproto_sccs, descriptor_table_matmult_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_matmult_2eproto::offsets,
  file_level_metadata_matmult_2eproto, 4, file_level_enum_descriptors_matmult_2eproto, file_level_service_descriptors_matmult_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_matmult_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_matmult_2eproto), true);
namespace matmult {

// ===================================================================

void Matrix_Column::InitAsDefaultInstance() {
}
class Matrix_Column::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matrix_Column::kCoefficientsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matrix_Column::Matrix_Column()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matmult.Matrix.Column)
}
Matrix_Column::Matrix_Column(const Matrix_Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      coefficients_(from.coefficients_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:matmult.Matrix.Column)
}

void Matrix_Column::SharedCtor() {
}

Matrix_Column::~Matrix_Column() {
  // @@protoc_insertion_point(destructor:matmult.Matrix.Column)
  SharedDtor();
}

void Matrix_Column::SharedDtor() {
}

void Matrix_Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Matrix_Column& Matrix_Column::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Matrix_Column_matmult_2eproto.base);
  return *internal_default_instance();
}


void Matrix_Column::Clear() {
// @@protoc_insertion_point(message_clear_start:matmult.Matrix.Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coefficients_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Matrix_Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double coefficients = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_coefficients(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          add_coefficients(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Matrix_Column::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:matmult.Matrix.Column)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double coefficients = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_coefficients())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_coefficients())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:matmult.Matrix.Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:matmult.Matrix.Column)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Matrix_Column::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:matmult.Matrix.Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double coefficients = 1 [packed = true];
  if (this->coefficients_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_coefficients_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->coefficients().data(), this->coefficients_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:matmult.Matrix.Column)
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix_Column::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:matmult.Matrix.Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double coefficients = 1 [packed = true];
  if (this->coefficients_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _coefficients_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->coefficients_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:matmult.Matrix.Column)
  return target;
}

size_t Matrix_Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:matmult.Matrix.Column)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double coefficients = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->coefficients_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _coefficients_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix_Column::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:matmult.Matrix.Column)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix_Column* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix_Column>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:matmult.Matrix.Column)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:matmult.Matrix.Column)
    MergeFrom(*source);
  }
}

void Matrix_Column::MergeFrom(const Matrix_Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:matmult.Matrix.Column)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coefficients_.MergeFrom(from.coefficients_);
}

void Matrix_Column::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:matmult.Matrix.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix_Column::CopyFrom(const Matrix_Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:matmult.Matrix.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix_Column::IsInitialized() const {
  return true;
}

void Matrix_Column::Swap(Matrix_Column* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matrix_Column::InternalSwap(Matrix_Column* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  coefficients_.InternalSwap(&other->coefficients_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix_Column::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Matrix::InitAsDefaultInstance() {
}
class Matrix::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matrix::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matrix::Matrix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matmult.Matrix)
}
Matrix::Matrix(const Matrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:matmult.Matrix)
}

void Matrix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Matrix_matmult_2eproto.base);
}

Matrix::~Matrix() {
  // @@protoc_insertion_point(destructor:matmult.Matrix)
  SharedDtor();
}

void Matrix::SharedDtor() {
}

void Matrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Matrix& Matrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Matrix_matmult_2eproto.base);
  return *internal_default_instance();
}


void Matrix::Clear() {
// @@protoc_insertion_point(message_clear_start:matmult.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Matrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .matmult.Matrix.Column columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Matrix::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:matmult.Matrix)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .matmult.Matrix.Column columns = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:matmult.Matrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:matmult.Matrix)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Matrix::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:matmult.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .matmult.Matrix.Column columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->columns(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:matmult.Matrix)
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:matmult.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .matmult.Matrix.Column columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->columns(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:matmult.Matrix)
  return target;
}

size_t Matrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:matmult.Matrix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .matmult.Matrix.Column columns = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:matmult.Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:matmult.Matrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:matmult.Matrix)
    MergeFrom(*source);
  }
}

void Matrix::MergeFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:matmult.Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
}

void Matrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:matmult.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix::CopyFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:matmult.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix::IsInitialized() const {
  return true;
}

void Matrix::Swap(Matrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matrix::InternalSwap(Matrix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&columns_)->InternalSwap(CastToBase(&other->columns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PerformerRequest::InitAsDefaultInstance() {
  ::matmult::_PerformerRequest_default_instance_._instance.get_mutable()->multiplier_ = const_cast< ::matmult::Matrix*>(
      ::matmult::Matrix::internal_default_instance());
  ::matmult::_PerformerRequest_default_instance_._instance.get_mutable()->multiplicand_ = const_cast< ::matmult::Matrix*>(
      ::matmult::Matrix::internal_default_instance());
}
class PerformerRequest::HasBitSetters {
 public:
  static const ::matmult::Matrix& multiplier(const PerformerRequest* msg);
  static const ::matmult::Matrix& multiplicand(const PerformerRequest* msg);
};

const ::matmult::Matrix&
PerformerRequest::HasBitSetters::multiplier(const PerformerRequest* msg) {
  return *msg->multiplier_;
}
const ::matmult::Matrix&
PerformerRequest::HasBitSetters::multiplicand(const PerformerRequest* msg) {
  return *msg->multiplicand_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerformerRequest::kMultiplierFieldNumber;
const int PerformerRequest::kMultiplicandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerformerRequest::PerformerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matmult.PerformerRequest)
}
PerformerRequest::PerformerRequest(const PerformerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_multiplier()) {
    multiplier_ = new ::matmult::Matrix(*from.multiplier_);
  } else {
    multiplier_ = nullptr;
  }
  if (from.has_multiplicand()) {
    multiplicand_ = new ::matmult::Matrix(*from.multiplicand_);
  } else {
    multiplicand_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:matmult.PerformerRequest)
}

void PerformerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerformerRequest_matmult_2eproto.base);
  ::memset(&multiplier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiplicand_) -
      reinterpret_cast<char*>(&multiplier_)) + sizeof(multiplicand_));
}

PerformerRequest::~PerformerRequest() {
  // @@protoc_insertion_point(destructor:matmult.PerformerRequest)
  SharedDtor();
}

void PerformerRequest::SharedDtor() {
  if (this != internal_default_instance()) delete multiplier_;
  if (this != internal_default_instance()) delete multiplicand_;
}

void PerformerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerformerRequest& PerformerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerformerRequest_matmult_2eproto.base);
  return *internal_default_instance();
}


void PerformerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:matmult.PerformerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && multiplier_ != nullptr) {
    delete multiplier_;
  }
  multiplier_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && multiplicand_ != nullptr) {
    delete multiplicand_;
  }
  multiplicand_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerformerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .matmult.Matrix multiplier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_multiplier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .matmult.Matrix multiplicand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_multiplicand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerformerRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:matmult.PerformerRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .matmult.Matrix multiplier = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_multiplier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .matmult.Matrix multiplicand = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_multiplicand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:matmult.PerformerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:matmult.PerformerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerformerRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:matmult.PerformerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .matmult.Matrix multiplier = 1;
  if (this->has_multiplier()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::multiplier(this), output);
  }

  // .matmult.Matrix multiplicand = 2;
  if (this->has_multiplicand()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::multiplicand(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:matmult.PerformerRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PerformerRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:matmult.PerformerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .matmult.Matrix multiplier = 1;
  if (this->has_multiplier()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::multiplier(this), target);
  }

  // .matmult.Matrix multiplicand = 2;
  if (this->has_multiplicand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::multiplicand(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:matmult.PerformerRequest)
  return target;
}

size_t PerformerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:matmult.PerformerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .matmult.Matrix multiplier = 1;
  if (this->has_multiplier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multiplier_);
  }

  // .matmult.Matrix multiplicand = 2;
  if (this->has_multiplicand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multiplicand_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:matmult.PerformerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PerformerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerformerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:matmult.PerformerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:matmult.PerformerRequest)
    MergeFrom(*source);
  }
}

void PerformerRequest::MergeFrom(const PerformerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:matmult.PerformerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_multiplier()) {
    mutable_multiplier()->::matmult::Matrix::MergeFrom(from.multiplier());
  }
  if (from.has_multiplicand()) {
    mutable_multiplicand()->::matmult::Matrix::MergeFrom(from.multiplicand());
  }
}

void PerformerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:matmult.PerformerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerformerRequest::CopyFrom(const PerformerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:matmult.PerformerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformerRequest::IsInitialized() const {
  return true;
}

void PerformerRequest::Swap(PerformerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerformerRequest::InternalSwap(PerformerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(multiplier_, other->multiplier_);
  swap(multiplicand_, other->multiplicand_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PerformerResponse::InitAsDefaultInstance() {
  ::matmult::_PerformerResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::matmult::Matrix*>(
      ::matmult::Matrix::internal_default_instance());
}
class PerformerResponse::HasBitSetters {
 public:
  static const ::matmult::Matrix& result(const PerformerResponse* msg);
};

const ::matmult::Matrix&
PerformerResponse::HasBitSetters::result(const PerformerResponse* msg) {
  return *msg->result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerformerResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerformerResponse::PerformerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matmult.PerformerResponse)
}
PerformerResponse::PerformerResponse(const PerformerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::matmult::Matrix(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:matmult.PerformerResponse)
}

void PerformerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerformerResponse_matmult_2eproto.base);
  result_ = nullptr;
}

PerformerResponse::~PerformerResponse() {
  // @@protoc_insertion_point(destructor:matmult.PerformerResponse)
  SharedDtor();
}

void PerformerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void PerformerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerformerResponse& PerformerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerformerResponse_matmult_2eproto.base);
  return *internal_default_instance();
}


void PerformerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:matmult.PerformerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerformerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .matmult.Matrix result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerformerResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:matmult.PerformerResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .matmult.Matrix result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:matmult.PerformerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:matmult.PerformerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerformerResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:matmult.PerformerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .matmult.Matrix result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:matmult.PerformerResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PerformerResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:matmult.PerformerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .matmult.Matrix result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:matmult.PerformerResponse)
  return target;
}

size_t PerformerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:matmult.PerformerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .matmult.Matrix result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:matmult.PerformerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PerformerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerformerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:matmult.PerformerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:matmult.PerformerResponse)
    MergeFrom(*source);
  }
}

void PerformerResponse::MergeFrom(const PerformerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:matmult.PerformerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::matmult::Matrix::MergeFrom(from.result());
  }
}

void PerformerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:matmult.PerformerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerformerResponse::CopyFrom(const PerformerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:matmult.PerformerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformerResponse::IsInitialized() const {
  return true;
}

void PerformerResponse::Swap(PerformerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerformerResponse::InternalSwap(PerformerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace matmult
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::matmult::Matrix_Column* Arena::CreateMaybeMessage< ::matmult::Matrix_Column >(Arena* arena) {
  return Arena::CreateInternal< ::matmult::Matrix_Column >(arena);
}
template<> PROTOBUF_NOINLINE ::matmult::Matrix* Arena::CreateMaybeMessage< ::matmult::Matrix >(Arena* arena) {
  return Arena::CreateInternal< ::matmult::Matrix >(arena);
}
template<> PROTOBUF_NOINLINE ::matmult::PerformerRequest* Arena::CreateMaybeMessage< ::matmult::PerformerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::matmult::PerformerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::matmult::PerformerResponse* Arena::CreateMaybeMessage< ::matmult::PerformerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::matmult::PerformerResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
