// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: amwolff/matmult/v1/matrix_product_api.proto

#include "amwolff/matmult/v1/matrix_product_api.pb.h"
#include "amwolff/matmult/v1/matrix_product_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace amwolff {
namespace matmult {
namespace v1 {

static const char* MatrixProductAPI_method_names[] = {
  "/amwolff.matmult.v1.MatrixProductAPI/Multiply",
};

std::unique_ptr< MatrixProductAPI::Stub> MatrixProductAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MatrixProductAPI::Stub> stub(new MatrixProductAPI::Stub(channel));
  return stub;
}

MatrixProductAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Multiply_(MatrixProductAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MatrixProductAPI::Stub::Multiply(::grpc::ClientContext* context, const ::amwolff::matmult::v1::MultiplyRequest& request, ::amwolff::matmult::v1::MultiplyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Multiply_, context, request, response);
}

void MatrixProductAPI::Stub::experimental_async::Multiply(::grpc::ClientContext* context, const ::amwolff::matmult::v1::MultiplyRequest* request, ::amwolff::matmult::v1::MultiplyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Multiply_, context, request, response, std::move(f));
}

void MatrixProductAPI::Stub::experimental_async::Multiply(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::amwolff::matmult::v1::MultiplyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Multiply_, context, request, response, std::move(f));
}

void MatrixProductAPI::Stub::experimental_async::Multiply(::grpc::ClientContext* context, const ::amwolff::matmult::v1::MultiplyRequest* request, ::amwolff::matmult::v1::MultiplyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Multiply_, context, request, response, reactor);
}

void MatrixProductAPI::Stub::experimental_async::Multiply(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::amwolff::matmult::v1::MultiplyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Multiply_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::amwolff::matmult::v1::MultiplyResponse>* MatrixProductAPI::Stub::AsyncMultiplyRaw(::grpc::ClientContext* context, const ::amwolff::matmult::v1::MultiplyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::amwolff::matmult::v1::MultiplyResponse>::Create(channel_.get(), cq, rpcmethod_Multiply_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::amwolff::matmult::v1::MultiplyResponse>* MatrixProductAPI::Stub::PrepareAsyncMultiplyRaw(::grpc::ClientContext* context, const ::amwolff::matmult::v1::MultiplyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::amwolff::matmult::v1::MultiplyResponse>::Create(channel_.get(), cq, rpcmethod_Multiply_, context, request, false);
}

MatrixProductAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatrixProductAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatrixProductAPI::Service, ::amwolff::matmult::v1::MultiplyRequest, ::amwolff::matmult::v1::MultiplyResponse>(
          std::mem_fn(&MatrixProductAPI::Service::Multiply), this)));
}

MatrixProductAPI::Service::~Service() {
}

::grpc::Status MatrixProductAPI::Service::Multiply(::grpc::ServerContext* context, const ::amwolff::matmult::v1::MultiplyRequest* request, ::amwolff::matmult::v1::MultiplyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace amwolff
}  // namespace matmult
}  // namespace v1

