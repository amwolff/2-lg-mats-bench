// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amwolff/matmult/v1/matrix.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_amwolff_2fmatmult_2fv1_2fmatrix_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_amwolff_2fmatmult_2fv1_2fmatrix_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_amwolff_2fmatmult_2fv1_2fmatrix_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_amwolff_2fmatmult_2fv1_2fmatrix_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto;
namespace amwolff {
namespace matmult {
namespace v1 {
class Matrix;
class MatrixDefaultTypeInternal;
extern MatrixDefaultTypeInternal _Matrix_default_instance_;
class Matrix_Column;
class Matrix_ColumnDefaultTypeInternal;
extern Matrix_ColumnDefaultTypeInternal _Matrix_Column_default_instance_;
}  // namespace v1
}  // namespace matmult
}  // namespace amwolff
PROTOBUF_NAMESPACE_OPEN
template<> ::amwolff::matmult::v1::Matrix* Arena::CreateMaybeMessage<::amwolff::matmult::v1::Matrix>(Arena*);
template<> ::amwolff::matmult::v1::Matrix_Column* Arena::CreateMaybeMessage<::amwolff::matmult::v1::Matrix_Column>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace amwolff {
namespace matmult {
namespace v1 {

// ===================================================================

class Matrix_Column :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amwolff.matmult.v1.Matrix.Column) */ {
 public:
  Matrix_Column();
  virtual ~Matrix_Column();

  Matrix_Column(const Matrix_Column& from);
  Matrix_Column(Matrix_Column&& from) noexcept
    : Matrix_Column() {
    *this = ::std::move(from);
  }

  inline Matrix_Column& operator=(const Matrix_Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix_Column& operator=(Matrix_Column&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matrix_Column& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Matrix_Column* internal_default_instance() {
    return reinterpret_cast<const Matrix_Column*>(
               &_Matrix_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Matrix_Column& a, Matrix_Column& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix_Column* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matrix_Column* New() const final {
    return CreateMaybeMessage<Matrix_Column>(nullptr);
  }

  Matrix_Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix_Column>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matrix_Column& from);
  void MergeFrom(const Matrix_Column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix_Column* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amwolff.matmult.v1.Matrix.Column";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto);
    return ::descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoefficientsFieldNumber = 1,
  };
  // repeated double coefficients = 1 [packed = true];
  int coefficients_size() const;
  private:
  int _internal_coefficients_size() const;
  public:
  void clear_coefficients();
  private:
  double _internal_coefficients(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_coefficients() const;
  void _internal_add_coefficients(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_coefficients();
  public:
  double coefficients(int index) const;
  void set_coefficients(int index, double value);
  void add_coefficients(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      coefficients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_coefficients();

  // @@protoc_insertion_point(class_scope:amwolff.matmult.v1.Matrix.Column)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > coefficients_;
  mutable std::atomic<int> _coefficients_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amwolff_2fmatmult_2fv1_2fmatrix_2eproto;
};
// -------------------------------------------------------------------

class Matrix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amwolff.matmult.v1.Matrix) */ {
 public:
  Matrix();
  virtual ~Matrix();

  Matrix(const Matrix& from);
  Matrix(Matrix&& from) noexcept
    : Matrix() {
    *this = ::std::move(from);
  }

  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix& operator=(Matrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Matrix* internal_default_instance() {
    return reinterpret_cast<const Matrix*>(
               &_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Matrix& a, Matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matrix* New() const final {
    return CreateMaybeMessage<Matrix>(nullptr);
  }

  Matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matrix& from);
  void MergeFrom(const Matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amwolff.matmult.v1.Matrix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto);
    return ::descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Matrix_Column Column;

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 1,
  };
  // repeated .amwolff.matmult.v1.Matrix.Column columns = 1;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::amwolff::matmult::v1::Matrix_Column* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amwolff::matmult::v1::Matrix_Column >*
      mutable_columns();
  private:
  const ::amwolff::matmult::v1::Matrix_Column& _internal_columns(int index) const;
  ::amwolff::matmult::v1::Matrix_Column* _internal_add_columns();
  public:
  const ::amwolff::matmult::v1::Matrix_Column& columns(int index) const;
  ::amwolff::matmult::v1::Matrix_Column* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amwolff::matmult::v1::Matrix_Column >&
      columns() const;

  // @@protoc_insertion_point(class_scope:amwolff.matmult.v1.Matrix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amwolff::matmult::v1::Matrix_Column > columns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amwolff_2fmatmult_2fv1_2fmatrix_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Matrix_Column

// repeated double coefficients = 1 [packed = true];
inline int Matrix_Column::_internal_coefficients_size() const {
  return coefficients_.size();
}
inline int Matrix_Column::coefficients_size() const {
  return _internal_coefficients_size();
}
inline void Matrix_Column::clear_coefficients() {
  coefficients_.Clear();
}
inline double Matrix_Column::_internal_coefficients(int index) const {
  return coefficients_.Get(index);
}
inline double Matrix_Column::coefficients(int index) const {
  // @@protoc_insertion_point(field_get:amwolff.matmult.v1.Matrix.Column.coefficients)
  return _internal_coefficients(index);
}
inline void Matrix_Column::set_coefficients(int index, double value) {
  coefficients_.Set(index, value);
  // @@protoc_insertion_point(field_set:amwolff.matmult.v1.Matrix.Column.coefficients)
}
inline void Matrix_Column::_internal_add_coefficients(double value) {
  coefficients_.Add(value);
}
inline void Matrix_Column::add_coefficients(double value) {
  _internal_add_coefficients(value);
  // @@protoc_insertion_point(field_add:amwolff.matmult.v1.Matrix.Column.coefficients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Matrix_Column::_internal_coefficients() const {
  return coefficients_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Matrix_Column::coefficients() const {
  // @@protoc_insertion_point(field_list:amwolff.matmult.v1.Matrix.Column.coefficients)
  return _internal_coefficients();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Matrix_Column::_internal_mutable_coefficients() {
  return &coefficients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Matrix_Column::mutable_coefficients() {
  // @@protoc_insertion_point(field_mutable_list:amwolff.matmult.v1.Matrix.Column.coefficients)
  return _internal_mutable_coefficients();
}

// -------------------------------------------------------------------

// Matrix

// repeated .amwolff.matmult.v1.Matrix.Column columns = 1;
inline int Matrix::_internal_columns_size() const {
  return columns_.size();
}
inline int Matrix::columns_size() const {
  return _internal_columns_size();
}
inline void Matrix::clear_columns() {
  columns_.Clear();
}
inline ::amwolff::matmult::v1::Matrix_Column* Matrix::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:amwolff.matmult.v1.Matrix.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amwolff::matmult::v1::Matrix_Column >*
Matrix::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:amwolff.matmult.v1.Matrix.columns)
  return &columns_;
}
inline const ::amwolff::matmult::v1::Matrix_Column& Matrix::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const ::amwolff::matmult::v1::Matrix_Column& Matrix::columns(int index) const {
  // @@protoc_insertion_point(field_get:amwolff.matmult.v1.Matrix.columns)
  return _internal_columns(index);
}
inline ::amwolff::matmult::v1::Matrix_Column* Matrix::_internal_add_columns() {
  return columns_.Add();
}
inline ::amwolff::matmult::v1::Matrix_Column* Matrix::add_columns() {
  // @@protoc_insertion_point(field_add:amwolff.matmult.v1.Matrix.columns)
  return _internal_add_columns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::amwolff::matmult::v1::Matrix_Column >&
Matrix::columns() const {
  // @@protoc_insertion_point(field_list:amwolff.matmult.v1.Matrix.columns)
  return columns_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace matmult
}  // namespace amwolff

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_amwolff_2fmatmult_2fv1_2fmatrix_2eproto
