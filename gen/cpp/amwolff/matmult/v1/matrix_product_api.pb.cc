// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amwolff/matmult/v1/matrix_product_api.proto

#include "amwolff/matmult/v1/matrix_product_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_amwolff_2fmatmult_2fv1_2fmatrix_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Matrix_amwolff_2fmatmult_2fv1_2fmatrix_2eproto;
namespace amwolff {
namespace matmult {
namespace v1 {
class MultiplyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiplyRequest> _instance;
} _MultiplyRequest_default_instance_;
class MultiplyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiplyResponse> _instance;
} _MultiplyResponse_default_instance_;
}  // namespace v1
}  // namespace matmult
}  // namespace amwolff
static void InitDefaultsscc_info_MultiplyRequest_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amwolff::matmult::v1::_MultiplyRequest_default_instance_;
    new (ptr) ::amwolff::matmult::v1::MultiplyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amwolff::matmult::v1::MultiplyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiplyRequest_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiplyRequest_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto}, {
      &scc_info_Matrix_amwolff_2fmatmult_2fv1_2fmatrix_2eproto.base,}};

static void InitDefaultsscc_info_MultiplyResponse_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amwolff::matmult::v1::_MultiplyResponse_default_instance_;
    new (ptr) ::amwolff::matmult::v1::MultiplyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amwolff::matmult::v1::MultiplyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiplyResponse_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiplyResponse_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto}, {
      &scc_info_Matrix_amwolff_2fmatmult_2fv1_2fmatrix_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amwolff::matmult::v1::MultiplyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amwolff::matmult::v1::MultiplyRequest, multiplier_),
  PROTOBUF_FIELD_OFFSET(::amwolff::matmult::v1::MultiplyRequest, multiplicand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amwolff::matmult::v1::MultiplyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amwolff::matmult::v1::MultiplyResponse, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::amwolff::matmult::v1::MultiplyRequest)},
  { 7, -1, sizeof(::amwolff::matmult::v1::MultiplyResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amwolff::matmult::v1::_MultiplyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amwolff::matmult::v1::_MultiplyResponse_default_instance_),
};

const char descriptor_table_protodef_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+amwolff/matmult/v1/matrix_product_api."
  "proto\022\022amwolff.matmult.v1\032\037amwolff/matmu"
  "lt/v1/matrix.proto\"s\n\017MultiplyRequest\022.\n"
  "\nmultiplier\030\001 \001(\0132\032.amwolff.matmult.v1.M"
  "atrix\0220\n\014multiplicand\030\002 \001(\0132\032.amwolff.ma"
  "tmult.v1.Matrix\">\n\020MultiplyResponse\022*\n\006r"
  "esult\030\001 \001(\0132\032.amwolff.matmult.v1.Matrix2"
  "i\n\020MatrixProductAPI\022U\n\010Multiply\022#.amwolf"
  "f.matmult.v1.MultiplyRequest\032$.amwolff.m"
  "atmult.v1.MultiplyResponseBn\n\026com.amwolf"
  "f.matmult.v1B\025MatrixProductApiProtoH\001P\001Z"
  "\tmatmultv1\242\002\003AMX\252\002\022Amwolff.Matmult.V1\312\002\022"
  "Amwolff\\Matmult\\V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto_deps[1] = {
  &::descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto_sccs[2] = {
  &scc_info_MultiplyRequest_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto.base,
  &scc_info_MultiplyResponse_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto_once;
static bool descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto = {
  &descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto_initialized, descriptor_table_protodef_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto, "amwolff/matmult/v1/matrix_product_api.proto", 506,
  &descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto_once, descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto_sccs, descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto::offsets,
  file_level_metadata_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto, 2, file_level_enum_descriptors_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto, file_level_service_descriptors_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto), true);
namespace amwolff {
namespace matmult {
namespace v1 {

// ===================================================================

void MultiplyRequest::InitAsDefaultInstance() {
  ::amwolff::matmult::v1::_MultiplyRequest_default_instance_._instance.get_mutable()->multiplier_ = const_cast< ::amwolff::matmult::v1::Matrix*>(
      ::amwolff::matmult::v1::Matrix::internal_default_instance());
  ::amwolff::matmult::v1::_MultiplyRequest_default_instance_._instance.get_mutable()->multiplicand_ = const_cast< ::amwolff::matmult::v1::Matrix*>(
      ::amwolff::matmult::v1::Matrix::internal_default_instance());
}
class MultiplyRequest::_Internal {
 public:
  static const ::amwolff::matmult::v1::Matrix& multiplier(const MultiplyRequest* msg);
  static const ::amwolff::matmult::v1::Matrix& multiplicand(const MultiplyRequest* msg);
};

const ::amwolff::matmult::v1::Matrix&
MultiplyRequest::_Internal::multiplier(const MultiplyRequest* msg) {
  return *msg->multiplier_;
}
const ::amwolff::matmult::v1::Matrix&
MultiplyRequest::_Internal::multiplicand(const MultiplyRequest* msg) {
  return *msg->multiplicand_;
}
void MultiplyRequest::clear_multiplier() {
  if (GetArenaNoVirtual() == nullptr && multiplier_ != nullptr) {
    delete multiplier_;
  }
  multiplier_ = nullptr;
}
void MultiplyRequest::clear_multiplicand() {
  if (GetArenaNoVirtual() == nullptr && multiplicand_ != nullptr) {
    delete multiplicand_;
  }
  multiplicand_ = nullptr;
}
MultiplyRequest::MultiplyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amwolff.matmult.v1.MultiplyRequest)
}
MultiplyRequest::MultiplyRequest(const MultiplyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_multiplier()) {
    multiplier_ = new ::amwolff::matmult::v1::Matrix(*from.multiplier_);
  } else {
    multiplier_ = nullptr;
  }
  if (from._internal_has_multiplicand()) {
    multiplicand_ = new ::amwolff::matmult::v1::Matrix(*from.multiplicand_);
  } else {
    multiplicand_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:amwolff.matmult.v1.MultiplyRequest)
}

void MultiplyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiplyRequest_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto.base);
  ::memset(&multiplier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiplicand_) -
      reinterpret_cast<char*>(&multiplier_)) + sizeof(multiplicand_));
}

MultiplyRequest::~MultiplyRequest() {
  // @@protoc_insertion_point(destructor:amwolff.matmult.v1.MultiplyRequest)
  SharedDtor();
}

void MultiplyRequest::SharedDtor() {
  if (this != internal_default_instance()) delete multiplier_;
  if (this != internal_default_instance()) delete multiplicand_;
}

void MultiplyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiplyRequest& MultiplyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiplyRequest_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto.base);
  return *internal_default_instance();
}


void MultiplyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:amwolff.matmult.v1.MultiplyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && multiplier_ != nullptr) {
    delete multiplier_;
  }
  multiplier_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && multiplicand_ != nullptr) {
    delete multiplicand_;
  }
  multiplicand_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiplyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .amwolff.matmult.v1.Matrix multiplier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiplier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .amwolff.matmult.v1.Matrix multiplicand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiplicand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiplyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amwolff.matmult.v1.MultiplyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .amwolff.matmult.v1.Matrix multiplier = 1;
  if (this->has_multiplier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::multiplier(this), target, stream);
  }

  // .amwolff.matmult.v1.Matrix multiplicand = 2;
  if (this->has_multiplicand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::multiplicand(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amwolff.matmult.v1.MultiplyRequest)
  return target;
}

size_t MultiplyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amwolff.matmult.v1.MultiplyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .amwolff.matmult.v1.Matrix multiplier = 1;
  if (this->has_multiplier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multiplier_);
  }

  // .amwolff.matmult.v1.Matrix multiplicand = 2;
  if (this->has_multiplicand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multiplicand_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amwolff.matmult.v1.MultiplyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiplyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amwolff.matmult.v1.MultiplyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amwolff.matmult.v1.MultiplyRequest)
    MergeFrom(*source);
  }
}

void MultiplyRequest::MergeFrom(const MultiplyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amwolff.matmult.v1.MultiplyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_multiplier()) {
    _internal_mutable_multiplier()->::amwolff::matmult::v1::Matrix::MergeFrom(from._internal_multiplier());
  }
  if (from.has_multiplicand()) {
    _internal_mutable_multiplicand()->::amwolff::matmult::v1::Matrix::MergeFrom(from._internal_multiplicand());
  }
}

void MultiplyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amwolff.matmult.v1.MultiplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplyRequest::CopyFrom(const MultiplyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amwolff.matmult.v1.MultiplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplyRequest::IsInitialized() const {
  return true;
}

void MultiplyRequest::InternalSwap(MultiplyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(multiplier_, other->multiplier_);
  swap(multiplicand_, other->multiplicand_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiplyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiplyResponse::InitAsDefaultInstance() {
  ::amwolff::matmult::v1::_MultiplyResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::amwolff::matmult::v1::Matrix*>(
      ::amwolff::matmult::v1::Matrix::internal_default_instance());
}
class MultiplyResponse::_Internal {
 public:
  static const ::amwolff::matmult::v1::Matrix& result(const MultiplyResponse* msg);
};

const ::amwolff::matmult::v1::Matrix&
MultiplyResponse::_Internal::result(const MultiplyResponse* msg) {
  return *msg->result_;
}
void MultiplyResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
MultiplyResponse::MultiplyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amwolff.matmult.v1.MultiplyResponse)
}
MultiplyResponse::MultiplyResponse(const MultiplyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::amwolff::matmult::v1::Matrix(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:amwolff.matmult.v1.MultiplyResponse)
}

void MultiplyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiplyResponse_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto.base);
  result_ = nullptr;
}

MultiplyResponse::~MultiplyResponse() {
  // @@protoc_insertion_point(destructor:amwolff.matmult.v1.MultiplyResponse)
  SharedDtor();
}

void MultiplyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void MultiplyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiplyResponse& MultiplyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiplyResponse_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto.base);
  return *internal_default_instance();
}


void MultiplyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:amwolff.matmult.v1.MultiplyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MultiplyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .amwolff.matmult.v1.Matrix result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiplyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amwolff.matmult.v1.MultiplyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .amwolff.matmult.v1.Matrix result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amwolff.matmult.v1.MultiplyResponse)
  return target;
}

size_t MultiplyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amwolff.matmult.v1.MultiplyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .amwolff.matmult.v1.Matrix result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiplyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amwolff.matmult.v1.MultiplyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiplyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amwolff.matmult.v1.MultiplyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amwolff.matmult.v1.MultiplyResponse)
    MergeFrom(*source);
  }
}

void MultiplyResponse::MergeFrom(const MultiplyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amwolff.matmult.v1.MultiplyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::amwolff::matmult::v1::Matrix::MergeFrom(from._internal_result());
  }
}

void MultiplyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amwolff.matmult.v1.MultiplyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplyResponse::CopyFrom(const MultiplyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amwolff.matmult.v1.MultiplyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplyResponse::IsInitialized() const {
  return true;
}

void MultiplyResponse::InternalSwap(MultiplyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiplyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace matmult
}  // namespace amwolff
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::amwolff::matmult::v1::MultiplyRequest* Arena::CreateMaybeMessage< ::amwolff::matmult::v1::MultiplyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::amwolff::matmult::v1::MultiplyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::amwolff::matmult::v1::MultiplyResponse* Arena::CreateMaybeMessage< ::amwolff::matmult::v1::MultiplyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::amwolff::matmult::v1::MultiplyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
