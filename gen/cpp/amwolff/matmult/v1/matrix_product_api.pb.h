// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amwolff/matmult/v1/matrix_product_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "amwolff/matmult/v1/matrix.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto;
namespace amwolff {
namespace matmult {
namespace v1 {
class MultiplyRequest;
class MultiplyRequestDefaultTypeInternal;
extern MultiplyRequestDefaultTypeInternal _MultiplyRequest_default_instance_;
class MultiplyResponse;
class MultiplyResponseDefaultTypeInternal;
extern MultiplyResponseDefaultTypeInternal _MultiplyResponse_default_instance_;
}  // namespace v1
}  // namespace matmult
}  // namespace amwolff
PROTOBUF_NAMESPACE_OPEN
template<> ::amwolff::matmult::v1::MultiplyRequest* Arena::CreateMaybeMessage<::amwolff::matmult::v1::MultiplyRequest>(Arena*);
template<> ::amwolff::matmult::v1::MultiplyResponse* Arena::CreateMaybeMessage<::amwolff::matmult::v1::MultiplyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace amwolff {
namespace matmult {
namespace v1 {

// ===================================================================

class MultiplyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amwolff.matmult.v1.MultiplyRequest) */ {
 public:
  MultiplyRequest();
  virtual ~MultiplyRequest();

  MultiplyRequest(const MultiplyRequest& from);
  MultiplyRequest(MultiplyRequest&& from) noexcept
    : MultiplyRequest() {
    *this = ::std::move(from);
  }

  inline MultiplyRequest& operator=(const MultiplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiplyRequest& operator=(MultiplyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiplyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiplyRequest* internal_default_instance() {
    return reinterpret_cast<const MultiplyRequest*>(
               &_MultiplyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MultiplyRequest* other);
  friend void swap(MultiplyRequest& a, MultiplyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultiplyRequest* New() const final {
    return CreateMaybeMessage<MultiplyRequest>(nullptr);
  }

  MultiplyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiplyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiplyRequest& from);
  void MergeFrom(const MultiplyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiplyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amwolff.matmult.v1.MultiplyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto);
    return ::descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .amwolff.matmult.v1.Matrix multiplier = 1;
  bool has_multiplier() const;
  void clear_multiplier();
  static const int kMultiplierFieldNumber = 1;
  const ::amwolff::matmult::v1::Matrix& multiplier() const;
  ::amwolff::matmult::v1::Matrix* release_multiplier();
  ::amwolff::matmult::v1::Matrix* mutable_multiplier();
  void set_allocated_multiplier(::amwolff::matmult::v1::Matrix* multiplier);

  // .amwolff.matmult.v1.Matrix multiplicand = 2;
  bool has_multiplicand() const;
  void clear_multiplicand();
  static const int kMultiplicandFieldNumber = 2;
  const ::amwolff::matmult::v1::Matrix& multiplicand() const;
  ::amwolff::matmult::v1::Matrix* release_multiplicand();
  ::amwolff::matmult::v1::Matrix* mutable_multiplicand();
  void set_allocated_multiplicand(::amwolff::matmult::v1::Matrix* multiplicand);

  // @@protoc_insertion_point(class_scope:amwolff.matmult.v1.MultiplyRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::amwolff::matmult::v1::Matrix* multiplier_;
  ::amwolff::matmult::v1::Matrix* multiplicand_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto;
};
// -------------------------------------------------------------------

class MultiplyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amwolff.matmult.v1.MultiplyResponse) */ {
 public:
  MultiplyResponse();
  virtual ~MultiplyResponse();

  MultiplyResponse(const MultiplyResponse& from);
  MultiplyResponse(MultiplyResponse&& from) noexcept
    : MultiplyResponse() {
    *this = ::std::move(from);
  }

  inline MultiplyResponse& operator=(const MultiplyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiplyResponse& operator=(MultiplyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiplyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiplyResponse* internal_default_instance() {
    return reinterpret_cast<const MultiplyResponse*>(
               &_MultiplyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MultiplyResponse* other);
  friend void swap(MultiplyResponse& a, MultiplyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultiplyResponse* New() const final {
    return CreateMaybeMessage<MultiplyResponse>(nullptr);
  }

  MultiplyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiplyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiplyResponse& from);
  void MergeFrom(const MultiplyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiplyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amwolff.matmult.v1.MultiplyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto);
    return ::descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .amwolff.matmult.v1.Matrix result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::amwolff::matmult::v1::Matrix& result() const;
  ::amwolff::matmult::v1::Matrix* release_result();
  ::amwolff::matmult::v1::Matrix* mutable_result();
  void set_allocated_result(::amwolff::matmult::v1::Matrix* result);

  // @@protoc_insertion_point(class_scope:amwolff.matmult.v1.MultiplyResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::amwolff::matmult::v1::Matrix* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MultiplyRequest

// .amwolff.matmult.v1.Matrix multiplier = 1;
inline bool MultiplyRequest::has_multiplier() const {
  return this != internal_default_instance() && multiplier_ != nullptr;
}
inline const ::amwolff::matmult::v1::Matrix& MultiplyRequest::multiplier() const {
  const ::amwolff::matmult::v1::Matrix* p = multiplier_;
  // @@protoc_insertion_point(field_get:amwolff.matmult.v1.MultiplyRequest.multiplier)
  return p != nullptr ? *p : *reinterpret_cast<const ::amwolff::matmult::v1::Matrix*>(
      &::amwolff::matmult::v1::_Matrix_default_instance_);
}
inline ::amwolff::matmult::v1::Matrix* MultiplyRequest::release_multiplier() {
  // @@protoc_insertion_point(field_release:amwolff.matmult.v1.MultiplyRequest.multiplier)
  
  ::amwolff::matmult::v1::Matrix* temp = multiplier_;
  multiplier_ = nullptr;
  return temp;
}
inline ::amwolff::matmult::v1::Matrix* MultiplyRequest::mutable_multiplier() {
  
  if (multiplier_ == nullptr) {
    auto* p = CreateMaybeMessage<::amwolff::matmult::v1::Matrix>(GetArenaNoVirtual());
    multiplier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:amwolff.matmult.v1.MultiplyRequest.multiplier)
  return multiplier_;
}
inline void MultiplyRequest::set_allocated_multiplier(::amwolff::matmult::v1::Matrix* multiplier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(multiplier_);
  }
  if (multiplier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      multiplier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiplier, submessage_arena);
    }
    
  } else {
    
  }
  multiplier_ = multiplier;
  // @@protoc_insertion_point(field_set_allocated:amwolff.matmult.v1.MultiplyRequest.multiplier)
}

// .amwolff.matmult.v1.Matrix multiplicand = 2;
inline bool MultiplyRequest::has_multiplicand() const {
  return this != internal_default_instance() && multiplicand_ != nullptr;
}
inline const ::amwolff::matmult::v1::Matrix& MultiplyRequest::multiplicand() const {
  const ::amwolff::matmult::v1::Matrix* p = multiplicand_;
  // @@protoc_insertion_point(field_get:amwolff.matmult.v1.MultiplyRequest.multiplicand)
  return p != nullptr ? *p : *reinterpret_cast<const ::amwolff::matmult::v1::Matrix*>(
      &::amwolff::matmult::v1::_Matrix_default_instance_);
}
inline ::amwolff::matmult::v1::Matrix* MultiplyRequest::release_multiplicand() {
  // @@protoc_insertion_point(field_release:amwolff.matmult.v1.MultiplyRequest.multiplicand)
  
  ::amwolff::matmult::v1::Matrix* temp = multiplicand_;
  multiplicand_ = nullptr;
  return temp;
}
inline ::amwolff::matmult::v1::Matrix* MultiplyRequest::mutable_multiplicand() {
  
  if (multiplicand_ == nullptr) {
    auto* p = CreateMaybeMessage<::amwolff::matmult::v1::Matrix>(GetArenaNoVirtual());
    multiplicand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:amwolff.matmult.v1.MultiplyRequest.multiplicand)
  return multiplicand_;
}
inline void MultiplyRequest::set_allocated_multiplicand(::amwolff::matmult::v1::Matrix* multiplicand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(multiplicand_);
  }
  if (multiplicand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      multiplicand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiplicand, submessage_arena);
    }
    
  } else {
    
  }
  multiplicand_ = multiplicand;
  // @@protoc_insertion_point(field_set_allocated:amwolff.matmult.v1.MultiplyRequest.multiplicand)
}

// -------------------------------------------------------------------

// MultiplyResponse

// .amwolff.matmult.v1.Matrix result = 1;
inline bool MultiplyResponse::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline const ::amwolff::matmult::v1::Matrix& MultiplyResponse::result() const {
  const ::amwolff::matmult::v1::Matrix* p = result_;
  // @@protoc_insertion_point(field_get:amwolff.matmult.v1.MultiplyResponse.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::amwolff::matmult::v1::Matrix*>(
      &::amwolff::matmult::v1::_Matrix_default_instance_);
}
inline ::amwolff::matmult::v1::Matrix* MultiplyResponse::release_result() {
  // @@protoc_insertion_point(field_release:amwolff.matmult.v1.MultiplyResponse.result)
  
  ::amwolff::matmult::v1::Matrix* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::amwolff::matmult::v1::Matrix* MultiplyResponse::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::amwolff::matmult::v1::Matrix>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:amwolff.matmult.v1.MultiplyResponse.result)
  return result_;
}
inline void MultiplyResponse::set_allocated_result(::amwolff::matmult::v1::Matrix* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:amwolff.matmult.v1.MultiplyResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace matmult
}  // namespace amwolff

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_amwolff_2fmatmult_2fv1_2fmatrix_5fproduct_5fapi_2eproto
