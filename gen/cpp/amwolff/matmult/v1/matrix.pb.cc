// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amwolff/matmult/v1/matrix.proto

#include "amwolff/matmult/v1/matrix.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_amwolff_2fmatmult_2fv1_2fmatrix_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Matrix_Column_amwolff_2fmatmult_2fv1_2fmatrix_2eproto;
namespace amwolff {
namespace matmult {
namespace v1 {
class Matrix_ColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Matrix_Column> _instance;
} _Matrix_Column_default_instance_;
class MatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Matrix> _instance;
} _Matrix_default_instance_;
}  // namespace v1
}  // namespace matmult
}  // namespace amwolff
static void InitDefaultsscc_info_Matrix_amwolff_2fmatmult_2fv1_2fmatrix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amwolff::matmult::v1::_Matrix_default_instance_;
    new (ptr) ::amwolff::matmult::v1::Matrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amwolff::matmult::v1::Matrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Matrix_amwolff_2fmatmult_2fv1_2fmatrix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Matrix_amwolff_2fmatmult_2fv1_2fmatrix_2eproto}, {
      &scc_info_Matrix_Column_amwolff_2fmatmult_2fv1_2fmatrix_2eproto.base,}};

static void InitDefaultsscc_info_Matrix_Column_amwolff_2fmatmult_2fv1_2fmatrix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amwolff::matmult::v1::_Matrix_Column_default_instance_;
    new (ptr) ::amwolff::matmult::v1::Matrix_Column();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amwolff::matmult::v1::Matrix_Column::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Matrix_Column_amwolff_2fmatmult_2fv1_2fmatrix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Matrix_Column_amwolff_2fmatmult_2fv1_2fmatrix_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_amwolff_2fmatmult_2fv1_2fmatrix_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_amwolff_2fmatmult_2fv1_2fmatrix_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_amwolff_2fmatmult_2fv1_2fmatrix_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_amwolff_2fmatmult_2fv1_2fmatrix_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amwolff::matmult::v1::Matrix_Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amwolff::matmult::v1::Matrix_Column, coefficients_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amwolff::matmult::v1::Matrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amwolff::matmult::v1::Matrix, columns_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::amwolff::matmult::v1::Matrix_Column)},
  { 6, -1, sizeof(::amwolff::matmult::v1::Matrix)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amwolff::matmult::v1::_Matrix_Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amwolff::matmult::v1::_Matrix_default_instance_),
};

const char descriptor_table_protodef_amwolff_2fmatmult_2fv1_2fmatrix_2eproto[] =
  "\n\037amwolff/matmult/v1/matrix.proto\022\022amwol"
  "ff.matmult.v1\"`\n\006Matrix\0222\n\007columns\030\001 \003(\013"
  "2!.amwolff.matmult.v1.Matrix.Column\032\"\n\006C"
  "olumn\022\030\n\014coefficients\030\001 \003(\001B\002\020\001Bd\n\026com.a"
  "mwolff.matmult.v1B\013MatrixProtoH\001P\001Z\tmatm"
  "ultv1\242\002\003AMX\252\002\022Amwolff.Matmult.V1\312\002\022Amwol"
  "ff\\Matmult\\V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto_sccs[2] = {
  &scc_info_Matrix_amwolff_2fmatmult_2fv1_2fmatrix_2eproto.base,
  &scc_info_Matrix_Column_amwolff_2fmatmult_2fv1_2fmatrix_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto_once;
static bool descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto = {
  &descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto_initialized, descriptor_table_protodef_amwolff_2fmatmult_2fv1_2fmatrix_2eproto, "amwolff/matmult/v1/matrix.proto", 261,
  &descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto_once, descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto_sccs, descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_amwolff_2fmatmult_2fv1_2fmatrix_2eproto::offsets,
  file_level_metadata_amwolff_2fmatmult_2fv1_2fmatrix_2eproto, 2, file_level_enum_descriptors_amwolff_2fmatmult_2fv1_2fmatrix_2eproto, file_level_service_descriptors_amwolff_2fmatmult_2fv1_2fmatrix_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_amwolff_2fmatmult_2fv1_2fmatrix_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_amwolff_2fmatmult_2fv1_2fmatrix_2eproto), true);
namespace amwolff {
namespace matmult {
namespace v1 {

// ===================================================================

void Matrix_Column::InitAsDefaultInstance() {
}
class Matrix_Column::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matrix_Column::kCoefficientsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matrix_Column::Matrix_Column()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amwolff.matmult.v1.Matrix.Column)
}
Matrix_Column::Matrix_Column(const Matrix_Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      coefficients_(from.coefficients_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:amwolff.matmult.v1.Matrix.Column)
}

void Matrix_Column::SharedCtor() {
}

Matrix_Column::~Matrix_Column() {
  // @@protoc_insertion_point(destructor:amwolff.matmult.v1.Matrix.Column)
  SharedDtor();
}

void Matrix_Column::SharedDtor() {
}

void Matrix_Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Matrix_Column& Matrix_Column::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Matrix_Column_amwolff_2fmatmult_2fv1_2fmatrix_2eproto.base);
  return *internal_default_instance();
}


void Matrix_Column::Clear() {
// @@protoc_insertion_point(message_clear_start:amwolff.matmult.v1.Matrix.Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coefficients_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Matrix_Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double coefficients = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_coefficients(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          add_coefficients(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Matrix_Column::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:amwolff.matmult.v1.Matrix.Column)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double coefficients = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_coefficients())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_coefficients())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amwolff.matmult.v1.Matrix.Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amwolff.matmult.v1.Matrix.Column)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Matrix_Column::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amwolff.matmult.v1.Matrix.Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double coefficients = 1 [packed = true];
  if (this->coefficients_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_coefficients_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->coefficients().data(), this->coefficients_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amwolff.matmult.v1.Matrix.Column)
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix_Column::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amwolff.matmult.v1.Matrix.Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double coefficients = 1 [packed = true];
  if (this->coefficients_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _coefficients_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->coefficients_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amwolff.matmult.v1.Matrix.Column)
  return target;
}

size_t Matrix_Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amwolff.matmult.v1.Matrix.Column)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double coefficients = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->coefficients_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _coefficients_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix_Column::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amwolff.matmult.v1.Matrix.Column)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix_Column* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix_Column>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amwolff.matmult.v1.Matrix.Column)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amwolff.matmult.v1.Matrix.Column)
    MergeFrom(*source);
  }
}

void Matrix_Column::MergeFrom(const Matrix_Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amwolff.matmult.v1.Matrix.Column)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coefficients_.MergeFrom(from.coefficients_);
}

void Matrix_Column::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amwolff.matmult.v1.Matrix.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix_Column::CopyFrom(const Matrix_Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amwolff.matmult.v1.Matrix.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix_Column::IsInitialized() const {
  return true;
}

void Matrix_Column::Swap(Matrix_Column* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matrix_Column::InternalSwap(Matrix_Column* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  coefficients_.InternalSwap(&other->coefficients_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix_Column::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Matrix::InitAsDefaultInstance() {
}
class Matrix::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matrix::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matrix::Matrix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amwolff.matmult.v1.Matrix)
}
Matrix::Matrix(const Matrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:amwolff.matmult.v1.Matrix)
}

void Matrix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Matrix_amwolff_2fmatmult_2fv1_2fmatrix_2eproto.base);
}

Matrix::~Matrix() {
  // @@protoc_insertion_point(destructor:amwolff.matmult.v1.Matrix)
  SharedDtor();
}

void Matrix::SharedDtor() {
}

void Matrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Matrix& Matrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Matrix_amwolff_2fmatmult_2fv1_2fmatrix_2eproto.base);
  return *internal_default_instance();
}


void Matrix::Clear() {
// @@protoc_insertion_point(message_clear_start:amwolff.matmult.v1.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Matrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .amwolff.matmult.v1.Matrix.Column columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Matrix::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:amwolff.matmult.v1.Matrix)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .amwolff.matmult.v1.Matrix.Column columns = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amwolff.matmult.v1.Matrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amwolff.matmult.v1.Matrix)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Matrix::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amwolff.matmult.v1.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .amwolff.matmult.v1.Matrix.Column columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->columns(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amwolff.matmult.v1.Matrix)
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amwolff.matmult.v1.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .amwolff.matmult.v1.Matrix.Column columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->columns(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amwolff.matmult.v1.Matrix)
  return target;
}

size_t Matrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amwolff.matmult.v1.Matrix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .amwolff.matmult.v1.Matrix.Column columns = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amwolff.matmult.v1.Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amwolff.matmult.v1.Matrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amwolff.matmult.v1.Matrix)
    MergeFrom(*source);
  }
}

void Matrix::MergeFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amwolff.matmult.v1.Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
}

void Matrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amwolff.matmult.v1.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix::CopyFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amwolff.matmult.v1.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix::IsInitialized() const {
  return true;
}

void Matrix::Swap(Matrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matrix::InternalSwap(Matrix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&columns_)->InternalSwap(CastToBase(&other->columns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace matmult
}  // namespace amwolff
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::amwolff::matmult::v1::Matrix_Column* Arena::CreateMaybeMessage< ::amwolff::matmult::v1::Matrix_Column >(Arena* arena) {
  return Arena::CreateInternal< ::amwolff::matmult::v1::Matrix_Column >(arena);
}
template<> PROTOBUF_NOINLINE ::amwolff::matmult::v1::Matrix* Arena::CreateMaybeMessage< ::amwolff::matmult::v1::Matrix >(Arena* arena) {
  return Arena::CreateInternal< ::amwolff::matmult::v1::Matrix >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
